#!/usr/bin/env python3

# Let's manually decode the critical instructions
print("=== DETAILED INSTRUCTION ANALYSIS ===\n")

print("End of test() function (bytes ~130-166):")
print("48 c7 c7 02 00 00 00  = mov rdi, 2")
print("48 b8 [8 bytes]       = mov rax, [function_addr]")  
print("ff d0                 = call rax")
print("4c 8b 64 24 10        = mov r12, [rsp+16]  ; restore r12")
print("4c 8b 6c 24 08        = mov r13, [rsp+8]   ; restore r13") 
print("4c 8b 34 24           = mov r14, [rsp]     ; restore r14")
print("48 83 c4 18           = add rsp, 24        ; deallocate save area")
print("Missing: ret instruction (c3)!")
print()

print("Main function start (byte 167):")
print("55                    = push rbp")
print("48 89 e5              = mov rbp, rsp")
print("41 57                 = push r15")
print("48 81 ec c0 00 00 00  = sub rsp, 192      ; allocate stack")
print("48 83 ec 18           = sub rsp, 24       ; save area for r12,r13,r14")  
print("4c 89 64 24 10        = mov [rsp+16], r12 ; save r12")
print("4c 89 6c 24 08        = mov [rsp+8], r13  ; save r13")
print("4c 89 34 24           = mov [rsp], r14    ; save r14")
print()

print("End of main function (bytes ~280-307):")
print("48 b8 [8 bytes]       = mov rax, [function_addr]")
print("ff d0                 = call rax")
print("49 89 47 10           = mov [r15+16], rax  ; store result to x variable")
print("e8 d7 fe ff ff        = call -297         ; call test() function") 
print("e9 00 00 00 00        = jmp +0            ; jump to epilogue")
print()

print("Main epilogue (byte 307+):")
print("48 c7 c0 00 00 00 00  = mov rax, 0        ; return value")
print("48 81 c4 c0 00 00 00  = add rsp, 192      ; restore stack")
print("41 5f                 = pop r15           ; restore r15")
print("5d                    = pop rbp           ; restore rbp") 
print("c3                    = ret               ; return")
print()

print("=== PROBLEM ANALYSIS ===")
print()
print("CRITICAL ISSUE FOUND:")
print("The test() function is missing its 'ret' instruction!")
print()
print("Normal function should end with:")
print("1. Restore registers (r12, r13, r14) ✓")
print("2. Deallocate stack space ✓") 
print("3. Return instruction (ret/c3) ✗ MISSING!")
print()
print("Instead, execution continues into main function code!")
print("This causes:")
print("- Stack corruption (double function prologue)")
print("- Register corruption") 
print("- Invalid return address")
print()
print("The crash happens when main tries to return with corrupted stack.")
